#!/usr/bin/php
<?php

function is_json($string)
{
	return !preg_match('/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/',
       preg_replace('/"(\\.|[^"\\\\])*"/', '', $string));
}

function prepareParameters($string)
{
	if (is_json($string))
	{
		return json_decode($string, true);
	}
	return $string;
}

function print_result($result, $output)
{
	switch(gettype($result))
	{
		case 'string':
		case 'integer':
		case 'double':
		case 'NULL':
			echo $result."\n";
			break;
		case 'boolean':
			echo ($result === true ? 'true' : 'false')."\n";
			break;
		case 'array':
		case 'object':
			if ($output === 'json')
			{
				echo json_encode($result)."\n";
				break;
			}
		default:
			print_r($result);
	}
}

/**
 * parseArgs Command Line Interface (CLI) utility function.
 * @author              Patrick Fisher <patrick@pwfisher.com>
 * @see                 https://github.com/pwfisher/CommandLine.php
 */
function parseArgs($argv = null)
{
    $argv = $argv ? $argv : $_SERVER['argv']; array_shift($argv); $o = array();
    for ($i = 0, $j = count($argv); $i < $j; $i++) { $a = $argv[$i];
        if (substr($a, 0, 2) == '--') { $eq = strpos($a, '=');
            if ($eq !== false) { $o[substr($a, 2, $eq - 2)] = substr($a, $eq + 1); }
            else { $k = substr($a, 2);
                if ($i + 1 < $j && $argv[$i + 1][0] !== '-') { $o[$k] = $argv[$i + 1]; $i++; }
                else if (!isset($o[$k])) { $o[$k] = true; } } }
        else if (substr($a, 0, 1) == '-') {
            if (substr($a, 2, 1) == '=') { $o[substr($a, 1, 1)] = substr($a, 3); }
            else {
                foreach (str_split(substr($a, 1)) as $k) { if (!isset($o[$k])) { $o[$k] = true; } }
                if ($i + 1 < $j && $argv[$i + 1][0] !== '-') { $o[$k] = $argv[$i + 1]; $i++; } } }
        else { $o[] = $a; } }
    return $o;
}

function setOption(&$args, $options, $default = NULL)
{
	$value = $default;
	foreach ($options as $option)
	{
		if (isset($args[$option]))
		{
			$value = $args[$option];
			unset($args[$option]);
		}
	}
	return $value;
}

// MAIN
if (!isset($argv[1]) || empty($argv[1]))
{
	error_log('"function" required'."\n".' runphp function [-o|--output json] [arg1] [arg2] ...');
	exit();
}

$func = trim($argv[1]);

$args = parseArgs();

$output = setOption($args, array('o', 'output'), 'common');

if (function_exists($func))
{
	$params = array();
	$argsc = count($args);
	for ($i = 1; $i < $argsc; $i++)
	{
		$params[] = prepareParameters($args[$i]);
	}
	print_result(call_user_func_array($func, $params), $output);
} else {
	error_log('Function "'.$func.'" not exists!');
	exit(1);
}